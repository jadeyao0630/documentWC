{"ast":null,"code":"var _jsxFileName = \"D:\\\\jadey\\\\Desktop\\\\glory\\\\grDocuments\\\\client\\\\src\\\\utils\\\\DBLoader\\\\DBLoaderContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// 定义上下文中的值的类型\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 创建上下文\nconst DBLoaderContext = /*#__PURE__*/createContext(undefined);\n\n// 上下文提供者组件的Props类型\n\nexport const DBLoaderProvider = ({\n  children\n}) => {\n  _s();\n  //const [databaseType, setDatabaseType] = useState<databaseType>('mssql');\n  const [result, setResult] = useState();\n  const [search, setSearch] = useState();\n  return /*#__PURE__*/_jsxDEV(DBLoaderContext.Provider, {\n    value: {\n      result,\n      setResult,\n      search,\n      setSearch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义钩子，用于在组件中访问上下文\n_s(DBLoaderProvider, \"GjLBi1Svlr/WGnRMb+Le665DpoA=\");\n_c = DBLoaderProvider;\nexport const useDBload = () => {\n  _s2();\n  const context = useContext(DBLoaderContext);\n  if (!context) {\n    throw new Error('usePreload must be used within a DatabaseLoaderProvider');\n  }\n  return context;\n};\n_s2(useDBload, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DBLoaderProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","DBLoaderContext","undefined","DBLoaderProvider","children","_s","result","setResult","search","setSearch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDBload","_s2","context","Error","$RefreshReg$"],"sources":["D:/jadey/Desktop/glory/grDocuments/client/src/utils/DBLoader/DBLoaderContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\r\n\r\n\r\ntype databaseType = 'mysql' | 'mssql'\r\n\r\n// 定义上下文中的值的类型\r\ninterface DBLoaderContextType {\r\n//   databaseType:databaseType\r\n//   setDatabaseType:(type:databaseType)=>void;\r\n  result?:Array<object>;\r\n  setResult:(result:Array<object>)=>void;\r\n  search?:Array<object>;\r\n  setSearch:(search:Array<object>)=>void;\r\n}\r\n\r\n// 创建上下文\r\nconst DBLoaderContext = createContext<DBLoaderContextType | undefined>(undefined);\r\n\r\n// 上下文提供者组件的Props类型\r\ninterface DBLoaderProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const DBLoaderProvider: React.FC<DBLoaderProviderProps> = ({ children }) => {\r\n    //const [databaseType, setDatabaseType] = useState<databaseType>('mssql');\r\n    const [result, setResult] = useState<Array<object>>();\r\n    const [search, setSearch] = useState<Array<object>>();\r\n  return (\r\n    <DBLoaderContext.Provider value={{ result, setResult,search, setSearch}}>\r\n      {children}\r\n    </DBLoaderContext.Provider>\r\n  );\r\n};\r\n\r\n// 自定义钩子，用于在组件中访问上下文\r\nexport const useDBload = (): DBLoaderContextType => {\r\n  const context = useContext(DBLoaderContext);\r\n  if (!context) {\r\n    throw new Error('usePreload must be used within a DatabaseLoaderProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAA8B,OAAO;;AAKxF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUA;AACA,MAAMC,eAAe,gBAAGL,aAAa,CAAkCM,SAAS,CAAC;;AAEjF;;AAKA,OAAO,MAAMC,gBAAiD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAgB,CAAC;EACrD,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAgB,CAAC;EACvD,oBACEE,OAAA,CAACC,eAAe,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,MAAM;MAAEC,SAAS;MAACC,MAAM;MAAEC;IAAS,CAAE;IAAAL,QAAA,EACrEA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;;AAED;AAAAV,EAAA,CAXaF,gBAAiD;AAAAa,EAAA,GAAjDb,gBAAiD;AAY9D,OAAO,MAAMc,SAAS,GAAGA,CAAA,KAA2B;EAAAC,GAAA;EAClD,MAAMC,OAAO,GAAGtB,UAAU,CAACI,eAAe,CAAC;EAC3C,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;EAC5E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}