{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDBload } from './DBLoaderContext';\n\n// 定义上下文中的值的类型\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverIp = '192.168.6.213';\nconst serverPort = '4555';\nconst headers = {\n  'Content-Type': 'application/json'\n};\nconst DatabaseLoader = props => {\n  _s();\n  const {\n    databaseType = 'mssql'\n  } = props;\n  const {\n    setResult\n  } = useDBload();\n  useEffect(() => {\n    fetch(\"http://\" + serverIp + \":\" + serverPort + \"/getData\", {\n      headers: headers,\n      method: 'POST',\n      body: JSON.stringify({\n        type: databaseType,\n        query: 'select * from documents_list'\n      })\n    }).then(response => response.json()).then(data => {\n      //console.log(data.data.data.recordset)\n      if (data && data.data && data.data.success) {\n        setResult(data.data.data.recordset);\n      }\n    });\n  }, [databaseType, setResult]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(DatabaseLoader, \"KX0kwUsP+IQXyB1YQa4BDlYqITU=\", false, function () {\n  return [useDBload];\n});\n_c = DatabaseLoader;\nexport default DatabaseLoader;\nvar _c;\n$RefreshReg$(_c, \"DatabaseLoader\");","map":{"version":3,"names":["React","useEffect","useDBload","Fragment","_Fragment","jsxDEV","_jsxDEV","serverIp","serverPort","headers","DatabaseLoader","props","_s","databaseType","setResult","fetch","method","body","JSON","stringify","type","query","then","response","json","data","success","recordset","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/grDocuments/client/src/utils/DBLoader/DBLoader.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDBload } from './DBLoaderContext';\r\n\r\ntype databaseType = 'mysql' | 'mssql'\r\n\r\n// 定义上下文中的值的类型\r\ninterface DatabaseLoaderProps {\r\n  databaseType?:databaseType\r\n}\r\nconst serverIp='192.168.6.213'\r\nconst serverPort = '4555'\r\n\r\nconst headers={\r\n    'Content-Type': 'application/json'\r\n  };\r\nconst DatabaseLoader: React.FC<DatabaseLoaderProps> = (props) => {\r\n    const {databaseType='mssql'} = props\r\n    const { setResult } = useDBload();\r\n      useEffect(() => {\r\n        fetch(\"http://\"+serverIp+\":\"+serverPort+\"/getData\",{\r\n          headers:headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ type: databaseType,query:'select * from documents_list'})\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            //console.log(data.data.data.recordset)\r\n            if(data && data.data && data.data.success){\r\n                setResult(data.data.data.recordset);\r\n            }\r\n          })\r\n    },[databaseType, setResult])\r\n    return <></>;\r\n};\r\nexport default DatabaseLoader"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,SAAS,QAAQ,mBAAmB;;AAI7C;AAAA,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,QAAQ,GAAC,eAAe;AAC9B,MAAMC,UAAU,GAAG,MAAM;AAEzB,MAAMC,OAAO,GAAC;EACV,cAAc,EAAE;AAClB,CAAC;AACH,MAAMC,cAA6C,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7D,MAAM;IAACC,YAAY,GAAC;EAAO,CAAC,GAAGF,KAAK;EACpC,MAAM;IAAEG;EAAU,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAC/BD,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,SAAS,GAACR,QAAQ,GAAC,GAAG,GAACC,UAAU,GAAC,UAAU,EAAC;MACjDC,OAAO,EAACA,OAAO;MACfO,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAEP,YAAY;QAACQ,KAAK,EAAC;MAA8B,CAAC;IACjF,CAAC,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ;MACA,IAAGA,IAAI,IAAIA,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACA,IAAI,CAACC,OAAO,EAAC;QACtCZ,SAAS,CAACW,IAAI,CAACA,IAAI,CAACA,IAAI,CAACE,SAAS,CAAC;MACvC;IACF,CAAC,CAAC;EACR,CAAC,EAAC,CAACd,YAAY,EAAEC,SAAS,CAAC,CAAC;EAC5B,oBAAOR,OAAA,CAAAF,SAAA,mBAAI,CAAC;AAChB,CAAC;AAACQ,EAAA,CAlBIF,cAA6C;EAAA,QAEzBR,SAAS;AAAA;AAAA0B,EAAA,GAF7BlB,cAA6C;AAmBnD,eAAeA,cAAc;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}